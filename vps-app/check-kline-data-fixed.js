const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('smartflow.db');

console.log('üîç Ê£ÄÊü•1H KÁ∫øÊï∞ÊçÆÔºà‰øÆÊ≠£ÁâàÔºâ...\n');

// Ê£ÄÊü•1H KÁ∫øÊï∞ÊçÆ
db.all(`
  SELECT 
    symbol,
    COUNT(*) as count,
    MAX(close_time) as latest
  FROM kline_data 
  WHERE interval = '1h' 
    AND close_time > (strftime('%s', 'now') - 7200) * 1000
  GROUP BY symbol
  ORDER BY count DESC
  LIMIT 10
`, (err, rows) => {
  if (err) {
    console.error('Êü•ËØ¢1H KÁ∫øÊï∞ÊçÆÂ§±Ë¥•:', err);
    return;
  }
  
  console.log('üìä ÊúÄËøë2Â∞èÊó∂ÁöÑ1H KÁ∫øÊï∞ÊçÆÁªüËÆ°:');
  if (rows.length === 0) {
    console.log('‚ùå ÊúÄËøë2Â∞èÊó∂Ê≤°Êúâ1H KÁ∫øÊï∞ÊçÆ');
    
    // Ê£ÄÊü•ÊúÄÊñ∞ÁöÑ1HÊï∞ÊçÆ
    db.all(`
      SELECT 
        symbol,
        close_time,
        open_price,
        high_price,
        low_price,
        close_price,
        volume
      FROM kline_data 
      WHERE interval = '1h' 
      ORDER BY close_time DESC
      LIMIT 5
    `, (err, latestRows) => {
      if (err) {
        console.error('Êü•ËØ¢ÊúÄÊñ∞Êï∞ÊçÆÂ§±Ë¥•:', err);
        return;
      }
      
      console.log('\nüìä ÊúÄÊñ∞ÁöÑ1H KÁ∫øÊï∞ÊçÆ:');
      latestRows.forEach((row, index) => {
        const time = new Date(parseInt(row.close_time));
        console.log(`${index + 1}. ${row.symbol}: ${time.toISOString()}`);
        console.log(`   OHLC: ${row.open_price} | ${row.high_price} | ${row.low_price} | ${row.close_price}`);
        console.log(`   Êàê‰∫§Èáè: ${row.volume}`);
      });
      
      db.close();
    });
  } else {
    rows.forEach(row => {
      const time = new Date(parseInt(row.latest));
      console.log(`${row.symbol}: ${row.count}Êù°Êï∞ÊçÆ, ÊúÄÊñ∞: ${time.toISOString()}`);
    });
    
    // Ê£ÄÊü•ÂÖ∑‰ΩìÁöÑÊï∞ÊçÆÂÜÖÂÆπ
    console.log('\nüìä Ê£ÄÊü•ÂÖ∑‰ΩìÊï∞ÊçÆÂÜÖÂÆπ...');
    db.all(`
      SELECT 
        symbol,
        close_time,
        open_price,
        high_price,
        low_price,
        close_price,
        volume
      FROM kline_data 
      WHERE interval = '1h' 
        AND symbol = 'BTCUSDT'
      ORDER BY close_time DESC
      LIMIT 5
    `, (err, detailRows) => {
      if (err) {
        console.error('Êü•ËØ¢ËØ¶ÁªÜÊï∞ÊçÆÂ§±Ë¥•:', err);
        return;
      }
      
      console.log('\nüìä BTCUSDT 1HÊï∞ÊçÆËØ¶ÊÉÖ:');
      detailRows.forEach((row, index) => {
        const time = new Date(parseInt(row.close_time));
        console.log(`${index + 1}. Êó∂Èó¥: ${time.toISOString()}`);
        console.log(`   OHLC: ${row.open_price} | ${row.high_price} | ${row.low_price} | ${row.close_price}`);
        console.log(`   Êàê‰∫§Èáè: ${row.volume}`);
      });
      
      db.close();
    });
  }
});
