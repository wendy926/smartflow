# CN机房部署配置
version: "3.8"

services:
  trading-system-cn:
    build: .
    container_name: trading-system-cn
    environment:
      - NODE_ENV=production
      - REGION=CN
      - MYSQL_HOST=mysql-cn
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=trading_cn
      - MYSQL_USERNAME=trading_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - REDIS_HOST=redis-cn
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - TUSHARE_TOKEN=${TUSHARE_TOKEN}
      - BROKER_API_URL=${BROKER_API_URL}
      - BROKER_API_KEY=${BROKER_API_KEY}
      - BROKER_SECRET_KEY=${BROKER_SECRET_KEY}
    ports:
      - "3000:3000"
      - "9090:9090"
    depends_on:
      mysql-cn:
        condition: service_healthy
      redis-cn:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  mysql-cn:
    image: mysql:8.0
    container_name: mysql-cn
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=trading_cn
      - MYSQL_USER=trading_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql-cn-data:/var/lib/mysql
      - ./config/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password

  redis-cn:
    image: redis:7-alpine
    container_name: redis-cn
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-cn-data:/data
    restart: unless-stopped
    networks:
      - trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  mongodb-cn:
    image: mongo:6.0
    container_name: mongodb-cn
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=trading_logs
    ports:
      - "27017:27017"
    volumes:
      - mongodb-cn-data:/data/db
    restart: unless-stopped
    networks:
      - trading-network

  prometheus-cn:
    image: prom/prometheus:latest
    container_name: prometheus-cn
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-cn-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    restart: unless-stopped
    networks:
      - trading-network

  grafana-cn:
    image: grafana/grafana:latest
    container_name: grafana-cn
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3001:3000"
    volumes:
      - grafana-cn-data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - trading-network

volumes:
  mysql-cn-data:
  redis-cn-data:
  mongodb-cn-data:
  prometheus-cn-data:
  grafana-cn-data:

networks:
  trading-network:
    driver: bridge
